{"ast":null,"code":"// import React from 'react';\n// import './Maps.css';\n// import * as am4core from \"@amcharts/amcharts4/core\";\n// import * as am4maps from \"@amcharts/amcharts4/maps\";\n// import am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\"\n// import am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n// import am4themes_material from \"@amcharts/amcharts4/themes/material\";\n// am4core.useTheme(am4themes_material);\n// am4core.useTheme(am4themes_animated);\n// class MapCard extends React.Component{\n// \tconstructor(props){\n//     \t\tsuper(props);\n//     \t\tthis.state={data:null,};\n// \t\tthis.tooltipTemplate = \"<div style='padding:10px'><center>{name}<img src='{flag}' width='30px' height:'30px'/><center><br/>Active Cases : {active_cases}<br/>Total Recovered : {total_recovered}<br/>Total Deaths : {total_deaths}</div>\";\t\n// \t}\n// \t//creating map\n// \tcreateMap = ()=>{\n// \t\tlet map = am4core.create(\"mapdiv\",am4maps.MapChart);\n//     \t\tlet polygonSeries = map.series.push(new am4maps.MapPolygonSeries());\n//     \t\tlet polygonTemplate = polygonSeries.mapPolygons.template;\n//     \t\tmap.geodata = am4geodata_worldLow;\n//     \t\tmap.zoomControl = new am4maps.ZoomControl();\n//     \t\tmap.zoomControl.slider.height = 100;\n//     \t\tmap.projection = new am4maps.projections.Miller();\n//     \t\tlet hs = polygonTemplate.states.create(\"hover\");\n//    \t     \tpolygonTemplate.events.on(\"hit\",(event)=>this.props.handler(event.target.dataItem.dataContext.id));\n//     \t\ths.properties.fill = am4core.color(\"#000034\");\n//         \tpolygonSeries.useGeodata = true;\n//         \tpolygonSeries.data = this.state.data;\n//         \tpolygonTemplate.propertyFields.fill = \"fill\";\n//    \t\tpolygonTemplate.tooltipHTML = this.tooltipTemplate;\n//    \t\tpolygonSeries.heatRules.push({\n//   \t\t\t\t\"property\": \"fill\",\n//   \t\t\t\t\"target\": polygonSeries.mapPolygons.template,\n//   \t\t\t\t\"min\": am4core.color(\"#FF0000\"),\n//   \t\t\t\t\"max\": am4core.color(\"#AA0000\"),\n//   \t\t\t});\n//    \t\t// let heatLegend = map.createChild(am4maps.HeatLegend);\n// \t\t// heatLegend.series = polygonSeries;\n// \t\t// heatLegend.width = am4core.percent(100);\n// \t\t// polygonSeries.mapPolygons.template.events.on(\"over\", function(ev) {\n//   \t\t// if (!isNaN(ev.target.dataItem.value))\n//     \t// \t\theatLegend.valueAxis.showTooltipAt(ev.target.dataItem.value)\n// \t\t// else \n//     \t// \t\theatLegend.valueAxis.hideTooltip();\n// \t\t// });\n// \t\t// polygonSeries.mapPolygons.template.events.on(\"out\", function(ev) {\n// \t\t//   heatLegend.valueAxis.hideTooltip();\n// \t\t// });\n// \t}\n// \tcomponentDidMount(){\n//    \tfetch('https://corona.lmao.ninja/v2/countries?sort=country')\n//    \t.then((response)=>{return response.json();})\n//    \t.then((data)=>{\n//    \t\tdata = data.map(function(e,idx){\n//    \t\t\t\treturn ({\n//    \t\t\t\t\t\"id\":e[\"countryInfo\"][\"iso2\"],\n// \t\t\t\t\t\"name\":e[\"country\"],\n// \t\t\t\t\t\"total_cases\":e[\"cases\"],\n// \t\t\t\t\t\"active_cases\":e[\"active\"],\n// \t\t\t\t\t\"total_deaths\":e[\"deaths\"],\n// \t\t\t\t\t\"total_recovered\":e[\"recovered\"],\n// \t\t\t\t\t\"flag\":e[\"countryInfo\"][\"flag\"],\n// \t\t\t\t\t\"value\":e[\"cases\"]\n// \t\t\t\t});\t   \t\n//    \t\t\t});\n//    \t\tthis.setState({data:data});  \n//     \t\tthis.createMap();\n//       \t});\n//    \t}\n// \tcomponentDidUmount(){\n//     \t\tif(this.chart)\n//         \t\tthis.chart.dispose();\n//    \t}\n// \trender(){\n//     \t\treturn (\n//     \t\t\t<div className='map-container'><h4>COVID-19 Affected Areas</h4>\n//         \t\t<div className='mapdiv'></div>\n//     \t\t\t</div>\n//     \t\t\t);\n// \t}\n// }\n// export default MapCard;","map":{"version":3,"sources":["/home/deepali/Desktop/covid_dashboard/src/Home/Maps/Maps.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React from 'react';\n// import './Maps.css';\n// import * as am4core from \"@amcharts/amcharts4/core\";\n// import * as am4maps from \"@amcharts/amcharts4/maps\";\n// import am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\"\n// import am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n// import am4themes_material from \"@amcharts/amcharts4/themes/material\";\n// am4core.useTheme(am4themes_material);\n// am4core.useTheme(am4themes_animated);\n\n// class MapCard extends React.Component{\n\t\n// \tconstructor(props){\n//     \t\tsuper(props);\n//     \t\tthis.state={data:null,};\n// \t\tthis.tooltipTemplate = \"<div style='padding:10px'><center>{name}<img src='{flag}' width='30px' height:'30px'/><center><br/>Active Cases : {active_cases}<br/>Total Recovered : {total_recovered}<br/>Total Deaths : {total_deaths}</div>\";\t\n// \t}\n\t\n// \t//creating map\n// \tcreateMap = ()=>{\n// \t\tlet map = am4core.create(\"mapdiv\",am4maps.MapChart);\n//     \t\tlet polygonSeries = map.series.push(new am4maps.MapPolygonSeries());\n//     \t\tlet polygonTemplate = polygonSeries.mapPolygons.template;\n//     \t\tmap.geodata = am4geodata_worldLow;\n//     \t\tmap.zoomControl = new am4maps.ZoomControl();\n//     \t\tmap.zoomControl.slider.height = 100;\n//     \t\tmap.projection = new am4maps.projections.Miller();\n//     \t\tlet hs = polygonTemplate.states.create(\"hover\");\n//    \t     \tpolygonTemplate.events.on(\"hit\",(event)=>this.props.handler(event.target.dataItem.dataContext.id));\n//     \t\ths.properties.fill = am4core.color(\"#000034\");\n//         \tpolygonSeries.useGeodata = true;\n//         \tpolygonSeries.data = this.state.data;\n//         \tpolygonTemplate.propertyFields.fill = \"fill\";\n//    \t\tpolygonTemplate.tooltipHTML = this.tooltipTemplate;\n//    \t\tpolygonSeries.heatRules.push({\n//   \t\t\t\t\"property\": \"fill\",\n//   \t\t\t\t\"target\": polygonSeries.mapPolygons.template,\n//   \t\t\t\t\"min\": am4core.color(\"#FF0000\"),\n//   \t\t\t\t\"max\": am4core.color(\"#AA0000\"),\n//   \t\t\t});\n//    \t\t// let heatLegend = map.createChild(am4maps.HeatLegend);\n// \t\t// heatLegend.series = polygonSeries;\n// \t\t// heatLegend.width = am4core.percent(100);\n// \t\t// polygonSeries.mapPolygons.template.events.on(\"over\", function(ev) {\n//   \t\t// if (!isNaN(ev.target.dataItem.value))\n//     \t// \t\theatLegend.valueAxis.showTooltipAt(ev.target.dataItem.value)\n// \t\t// else \n//     \t// \t\theatLegend.valueAxis.hideTooltip();\n// \t\t// });\n// \t\t// polygonSeries.mapPolygons.template.events.on(\"out\", function(ev) {\n// \t\t//   heatLegend.valueAxis.hideTooltip();\n// \t\t// });\n// \t}\n\t\n// \tcomponentDidMount(){\n//    \tfetch('https://corona.lmao.ninja/v2/countries?sort=country')\n//    \t.then((response)=>{return response.json();})\n//    \t.then((data)=>{\n//    \t\tdata = data.map(function(e,idx){\n//    \t\t\t\treturn ({\n//    \t\t\t\t\t\"id\":e[\"countryInfo\"][\"iso2\"],\n// \t\t\t\t\t\"name\":e[\"country\"],\n// \t\t\t\t\t\"total_cases\":e[\"cases\"],\n// \t\t\t\t\t\"active_cases\":e[\"active\"],\n// \t\t\t\t\t\"total_deaths\":e[\"deaths\"],\n// \t\t\t\t\t\"total_recovered\":e[\"recovered\"],\n// \t\t\t\t\t\"flag\":e[\"countryInfo\"][\"flag\"],\n// \t\t\t\t\t\"value\":e[\"cases\"]\n// \t\t\t\t});\t   \t\n//    \t\t\t});\n//    \t\tthis.setState({data:data});  \n//     \t\tthis.createMap();\n//       \t});\n//    \t}\n\n\n// \tcomponentDidUmount(){\n//     \t\tif(this.chart)\n//         \t\tthis.chart.dispose();\n//    \t}\n   \t\n// \trender(){\n//     \t\treturn (\n//     \t\t\t<div className='map-container'><h4>COVID-19 Affected Areas</h4>\n//         \t\t<div className='mapdiv'></div>\n//     \t\t\t</div>\n//     \t\t\t);\n// \t}\n// }\n// export default MapCard;"]},"metadata":{},"sourceType":"module"}