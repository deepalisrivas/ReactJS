{"ast":null,"code":"var _jsxFileName = \"/home/deepali/Desktop/covid_dashboard/src/Home/Maps/Maps.js\";\nimport React from 'react';\nimport './Maps.css';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\"; // import am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\"\n\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport am4themes_material from \"@amcharts/amcharts4/themes/material\";\nam4core.useTheme(am4themes_material);\nam4core.useTheme(am4themes_animated);\n\nclass Maps extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.createMap = () => {\n      let map = am4core.create(\"mapdiv\", am4maps.MapChart);\n      let polygonSeries = map.series.push(new am4maps.MapPolygonSeries());\n      let polygonTemplate = polygonSeries.mapPolygons.template;\n      map.geodata = am4geodata_worldLow;\n      map.zoomControl = new am4maps.ZoomControl();\n      map.zoomControl.slider.height = 100;\n      map.projection = new am4maps.projections.Miller();\n      let hs = polygonTemplate.states.create(\"hover\");\n      polygonTemplate.events.on(\"hit\", event => this.props.handler(event.target.dataItem.dataContext.id));\n      hs.properties.fill = am4core.color(\"#000034\");\n      polygonSeries.useGeodata = true;\n      polygonSeries.data = this.state.data;\n      polygonTemplate.propertyFields.fill = \"fill\";\n      polygonTemplate.tooltipHTML = this.tooltipTemplate;\n      polygonSeries.heatRules.push({\n        \"property\": \"fill\",\n        \"target\": polygonSeries.mapPolygons.template,\n        \"min\": am4core.color(\"#FF0000\"),\n        \"max\": am4core.color(\"#AA0000\")\n      }); // let heatLegend = map.createChild(am4maps.HeatLegend);\n      // heatLegend.series = polygonSeries;\n      // heatLegend.width = am4core.percent(100);\n      // polygonSeries.mapPolygons.template.events.on(\"over\", function(ev) {\n      // if (!isNaN(ev.target.dataItem.value))\n      // \t\theatLegend.valueAxis.showTooltipAt(ev.target.dataItem.value)\n      // else \n      // \t\theatLegend.valueAxis.hideTooltip();\n      // });\n      // polygonSeries.mapPolygons.template.events.on(\"out\", function(ev) {\n      //   heatLegend.valueAxis.hideTooltip();\n      // });\n    };\n\n    this.state = {\n      data: null\n    };\n    this.tooltipTemplate = \"<div style='padding:10px'><center>{name}<img src='{flag}' width='30px' height:'30px'/><center><br/>Active Cases : {active_cases}<br/>Total Recovered : {total_recovered}<br/>Total Deaths : {total_deaths}</div>\";\n  } //creating map\n\n\n  componentDidMount() {\n    fetch('https://corona.lmao.ninja/v2/countries?sort=country').then(response => {\n      return response.json();\n    }).then(data => {\n      data = data.map(function (e, idx) {\n        return {\n          \"id\": e[\"countryInfo\"][\"iso2\"],\n          \"name\": e[\"country\"],\n          \"total_cases\": e[\"cases\"],\n          \"active_cases\": e[\"active\"],\n          \"total_deaths\": e[\"deaths\"],\n          \"total_recovered\": e[\"recovered\"],\n          \"flag\": e[\"countryInfo\"][\"flag\"],\n          \"value\": e[\"cases\"]\n        };\n      });\n      this.setState({\n        data: data\n      });\n      this.createMap();\n    });\n  }\n\n  componentDidUmount() {\n    if (this.chart) this.chart.dispose();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 39\n      }\n    }, \"COVID-19 Affected Areas\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mapdiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default Maps;","map":{"version":3,"sources":["/home/deepali/Desktop/covid_dashboard/src/Home/Maps/Maps.js"],"names":["React","am4core","am4maps","am4themes_animated","am4themes_material","useTheme","Maps","Component","constructor","props","createMap","map","create","MapChart","polygonSeries","series","push","MapPolygonSeries","polygonTemplate","mapPolygons","template","geodata","am4geodata_worldLow","zoomControl","ZoomControl","slider","height","projection","projections","Miller","hs","states","events","on","event","handler","target","dataItem","dataContext","id","properties","fill","color","useGeodata","data","state","propertyFields","tooltipHTML","tooltipTemplate","heatRules","componentDidMount","fetch","then","response","json","e","idx","setState","componentDidUmount","chart","dispose","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Maps.css';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\n// import am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\"\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport am4themes_material from \"@amcharts/amcharts4/themes/material\";\nam4core.useTheme(am4themes_material);\nam4core.useTheme(am4themes_animated);\n\nclass Maps extends React.Component{\n\t\n\tconstructor(props){\n    \t\tsuper(props);\n    \t\tthis.state={data:null,};\n\t\tthis.tooltipTemplate = \"<div style='padding:10px'><center>{name}<img src='{flag}' width='30px' height:'30px'/><center><br/>Active Cases : {active_cases}<br/>Total Recovered : {total_recovered}<br/>Total Deaths : {total_deaths}</div>\";\t\n\t}\n\t\n\t//creating map\n\tcreateMap = ()=>{\n\t\tlet map = am4core.create(\"mapdiv\",am4maps.MapChart);\n    \t\tlet polygonSeries = map.series.push(new am4maps.MapPolygonSeries());\n    \t\tlet polygonTemplate = polygonSeries.mapPolygons.template;\n    \t\tmap.geodata = am4geodata_worldLow;\n    \t\tmap.zoomControl = new am4maps.ZoomControl();\n    \t\tmap.zoomControl.slider.height = 100;\n    \t\tmap.projection = new am4maps.projections.Miller();\n    \t\tlet hs = polygonTemplate.states.create(\"hover\");\n   \t     \tpolygonTemplate.events.on(\"hit\",(event)=>this.props.handler(event.target.dataItem.dataContext.id));\n    \t\ths.properties.fill = am4core.color(\"#000034\");\n        \tpolygonSeries.useGeodata = true;\n        \tpolygonSeries.data = this.state.data;\n        \tpolygonTemplate.propertyFields.fill = \"fill\";\n   \t\tpolygonTemplate.tooltipHTML = this.tooltipTemplate;\n   \t\tpolygonSeries.heatRules.push({\n  \t\t\t\t\"property\": \"fill\",\n  \t\t\t\t\"target\": polygonSeries.mapPolygons.template,\n  \t\t\t\t\"min\": am4core.color(\"#FF0000\"),\n  \t\t\t\t\"max\": am4core.color(\"#AA0000\"),\n  \t\t\t});\n   \t\t// let heatLegend = map.createChild(am4maps.HeatLegend);\n\t\t// heatLegend.series = polygonSeries;\n\t\t// heatLegend.width = am4core.percent(100);\n\t\t// polygonSeries.mapPolygons.template.events.on(\"over\", function(ev) {\n  \t\t// if (!isNaN(ev.target.dataItem.value))\n    \t// \t\theatLegend.valueAxis.showTooltipAt(ev.target.dataItem.value)\n\t\t// else \n    \t// \t\theatLegend.valueAxis.hideTooltip();\n\t\t// });\n\t\t// polygonSeries.mapPolygons.template.events.on(\"out\", function(ev) {\n\t\t//   heatLegend.valueAxis.hideTooltip();\n\t\t// });\n\t}\n\t\n\tcomponentDidMount(){\n   \tfetch('https://corona.lmao.ninja/v2/countries?sort=country')\n   \t.then((response)=>{return response.json();})\n   \t.then((data)=>{\n   \t\tdata = data.map(function(e,idx){\n   \t\t\t\treturn ({\n   \t\t\t\t\t\"id\":e[\"countryInfo\"][\"iso2\"],\n\t\t\t\t\t\"name\":e[\"country\"],\n\t\t\t\t\t\"total_cases\":e[\"cases\"],\n\t\t\t\t\t\"active_cases\":e[\"active\"],\n\t\t\t\t\t\"total_deaths\":e[\"deaths\"],\n\t\t\t\t\t\"total_recovered\":e[\"recovered\"],\n\t\t\t\t\t\"flag\":e[\"countryInfo\"][\"flag\"],\n\t\t\t\t\t\"value\":e[\"cases\"]\n\t\t\t\t});\t   \t\n   \t\t\t});\n   \t\tthis.setState({data:data});  \n    \t\tthis.createMap();\n      \t});\n   \t}\n\n\n\tcomponentDidUmount(){\n    \t\tif(this.chart)\n        \t\tthis.chart.dispose();\n   \t}\n   \t\n\trender(){\n    \t\treturn (\n    \t\t\t<div className='map-container'><h4>COVID-19 Affected Areas</h4>\n        \t\t<div className='mapdiv'></div>\n    \t\t\t</div>\n    \t\t\t);\n\t}\n}\nexport default Maps;"]},"metadata":{},"sourceType":"module"}